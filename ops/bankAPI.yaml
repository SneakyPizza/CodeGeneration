---
# POST api/Accounts - creates a new bank account
# GET api/Accounts - gets accounts (set up pagination using query parameters)
# GET api/Accounts/{IBAN} - gets a specific bank account
# POST api/Accounts/{IBAN}/Deposit – add money to the account
# POST api/Accounts/{IBAN}/Withdraw – remove money from the account
# POST api/Transactions – transfer money from account to account
openapi: 3.0.0
info:
  title: BankAPI
  description: a bank api
  version: "1.0"
servers:
  - url: https://virtserver.swaggerhub.com/Jaimy-monsuur/BankAPI/1.0
    description: SwaggerHub API Auto Mocking
paths:
  # GET api/Users - gets users (set up pagination using query parameters)
  /api/Users:
    get:
      tags:
        - Users
      summary: Returns a list of users.
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      description: Optional extended description in CommonMark or HTML.
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':    # status code
          description: A JSON array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    password:
                      type: string
                    email:
                      type: string
                    firstName:
                      type: string
                    lastName:
                      type: string
                    street:
                      type: string
                    city:
                      type: string
                    zipcode:
                      type: string
                    userstatus:
                      enum: [ active, disabled ]
                    dayLimit:
                      type: number
                    transactionLimit:
                      type: number
                  example:
                    password: "75170fc230cd88f32e475ff4087f81d9"
                    email: "user@email.nl"
                    firstName: "John"
                    lastName: "Doe"
                    street: "examplestreet 1a"
                    city: "Amsterdam"
                    zipcode: "1234AB"
                    userstatus: "active"
                    dayLimit: "1000"
                    transactionLimit: "100"
    # POST api/Users - creates a new user
    post:
      tags:
        - Users
      summary: Creates a new user.
      description: Optional extended description in CommonMark or HTML.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                email:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                street:
                  type: string
                city:
                  type: string
                zipcode:
                  type: string
                userstatus:
                  enum: [ active, disabled ]
                dayLimit:
                  type: number
                transactionLimit:
                  type: number
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':    # status code
          description: A JSON array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    password:
                      type: string
                    email:
                      type: string
                    firstName:
                      type: string
                    lastName:
                      type: string
                    street:
                      type: string
                    city:
                      type: string
                    zipcode:
                      type: string
                    userstatus:
                      enum: [ active, disabled ]
                    dayLimit:
                      type: number
                    transactionLimit:
                      type: number
                  example:
                    password: "75170fc230cd88f32e475ff4087f81d9"
                    email: "user@gmail.com"
                    firstName: "John"
                    lastName: "Doe"
                    street: "examplestreet 1a"
                    city: "Amsterdam"
                    zipcode: "1234AB"
                    userstatus: "active"
                    dayLimit: "1000"
                    transactionLimit: "100"
  # GET api/Users/{id} - get user by id
  /api/Users/{id}:
    get:
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
            description: The user ID
      summary: Get user by id
      description: Optional extended description in CommonMark or HTML.
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          description: JSON with 1 user
          content:
            application/JSON:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  street:
                    type: string
                  city:
                    type: string
                  zipcode:
                    type: string
                  userstatus:
                    enum: [ active, disabled ]
                  dayLimit:
                    type: number
                  transactionLimit:
                    type: number
                example:
                  email: "user$gmail.com"
                  firstName: "John"
                  lastName: "Doe"
                  street: "examplestreet 1a"
                  city: "Amsterdam"
                  zipcode: "1234AB"
                  userstatus: "active"
                  dayLimit: "1000"
                  transactionLimit: "100"
    # PUT api/Users/ - updates a user
    put:
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
            description: The user ID
      summary: Updates a user.
      description: Optional extended description in CommonMark or HTML.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                email:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                street:
                  type: string
                city:
                  type: string
                zipcode:
                  type: string
                userstatus:
                  enum: [ active, disabled ]
                dayLimit:
                  type: number
                transactionLimit:
                  type: number
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':    # status code
          description: A JSON array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    password:
                      type: string
                    email:
                      type: string
                    firstName:
                      type: string
                    lastName:
                      type: string
                    street:
                      type: string
                    city:
                      type: string
                    zipcode:
                      type: string
                    userstatus:
                      enum: [ active, disabled ]
                    dayLimit:
                      type: number
                    transactionLimit:
                      type: number
                  example:
                    password: "75170fc230cd88f32e475ff4087f81d9"
                    email: "user$gmail.com"
                    firstName: "John"
                    lastName: "Doe"
                    street: "examplestreet 1a"
                    city: "Amsterdam"
                    zipcode: "1234AB"
                    userstatus: "active"
                    sayLimit: "1000"
                    transactionLimit: "100"
  # GET api/Accounts - gets accounts (set up pagination using query parameters)
  /api/Accounts:
    get:
      tags:
        - Accounts
      summary: Returns a list of accounts.
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      description: Optional extended description in CommonMark or HTML.
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':    # status code
          description: A JSON array of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    accountType:
                      enum: [ savings, current ]
                    userid:
                      type: integer
                    IBAN:
                      type: string
                    balance:
                      type: number
                    active:
                      enum: [ active, disabled ]
                    absoluteLimit:
                      type: number
                    user:
                      type: object
                      properties:
                        email:
                          type: string
                        firstName:
                          type: string
                        lastName:
                          type: string
                        street:
                          type: string
                        city:
                          type: string
                        zipcode:
                          type: string
                        userstatus:
                          enum: [active, disabled]
                        dayLimit:
                          type: number
                        transactionLimit:
                          type: number
                  example:
                    accountType: "savings"
                    userid: 1
                    IBAN: "NL91ABNA0417164300"
                    balance: "100.00"
                    active: "active"
                    absoluteLimit: "-1000.00"
                    user:
                      email: "john@example.com"
                      firstName: "John"
                      lastName: "Doe"
                      street: "examplestreet 1a"
                      city: "Amsterdam"
                      zipcode: "1234AB"
                      userstatus: "active"
                      dayLimit: "1000"
                      transactionLimit: "100"
    # POST api/Accounts/ - creates a new bank account
    post:
      tags:
        - Accounts
      summary: Creates a new bank account.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                accountType:
                  enum: [ savings, current ]
                userid:
                  type: integer
                IBAN: # iban?
                  type: string
                  pattern: '^NL[0-9]{2}INHO0[0-9]{9}$' # don't know if format works
                balance:
                  type: number
                active:
                  enum: [ active, disabled ]
                absoluteLimit:
                  type: number
              example:
                accountType: current
                userid: 10
                IBAN: "NL00INHO0123456789"
                balance: "0"
                active: "active"
                absoluteLimit: "-1000"
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '201':
          description: Created
  # GET api/Accounts/{IBAN} - gets a specific bank account
  /api/Accounts/{IBAN}:
    parameters:
      - in: path
        name: IBAN
        schema:
          type: string
        required: true
        description: Gets the account of the IBAN
    get:
      tags:
        - Accounts
      summary: Returns a account with IBAN.
      description: Optional extended description in CommonMark or HTML.
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':    # status code
          description: A JSON object of user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accountType:
                    enum: [ savings, current ]
                  userid:
                    type: integer
                  IBAN:
                    type: string
                  balance:
                    type: number
                  active:
                    enum: [ active, disabled ]
                  absoluteLimit:
                    type: number
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                      firstName:
                        type: string
                      lastName:
                        type: string
                      street:
                        type: string
                      city:
                        type: string
                      zipcode:
                        type: string
                      userstatus:
                        enum: [active, disabled]
                      dayLimit:
                        type: number
                      transactionLimit:
                        type: number
                example:
                  accountType: "savings"
                  userid: 1
                  IBAN: "NL91ABNA0417164300"
                  balance: "100.00"
                  active: "active"
                  absoluteLimit: "-1000.00"
                  user:
                    email: "john@example.com"
                    firstName: "John"
                    lastName: "Doe"
                    street: "examplestreet 1a"
                    city: "Amsterdam"
                    zipcode: "1234AB"
                    userstatus: "active"
                    dayLimit: "1000.00"
                    transactionLimit: "100.00"
    # PUT api/Accounts/{IBAN} - updates a bank account from active - non-active
    put:
      tags:
        - Accounts
      summary: Updates an Account.
      description: Optional extended description in CommonMark or HTML.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                accountType:
                  enum: [ savings, current ]
                userid:
                  type: integer
                IBAN:
                  type: string
                balance:
                  type: number
                active:
                  enum: [ active, disabled ]
                absoluteLimit:
                  type: number
                user:
                  type: object
                  properties:
                    email:
                      type: string
                    firstName:
                      type: string
                    lastName:
                      type: string
                    street:
                      type: string
                    city:
                      type: string
                    zipcode:
                      type: string
                    userstatus:
                      enum: [ active, disabled ]
                    dayLimit:
                      type: number
                    transactionLimit:
                      type: number
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200': # status code
          description: A JSON array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    accountType:
                      enum: [ savings, current ]
                    userid:
                      type: integer
                    IBAN:
                      type: string
                    balance:
                      type: number
                    active:
                      enum: [ active, disabled ]
                    absoluteLimit:
                      type: number
                    user:
                      type: object
                      properties:
                        email:
                          type: string
                        firstName:
                          type: string
                        lastName:
                          type: string
                        street:
                          type: string
                        city:
                          type: string
                        zipcode:
                          type: string
                        userstatus:
                          enum: [ active, disabled ]
                        dayLimit:
                          type: number
                        transactionLimit:
                          type: number
                  example:
                    accountType: "savings"
                    userid: 1
                    IBAN: "NL91ABNA0417164300"
                    balance: "100.00"
                    active: "disabled"
                    absoluteLimit: "-1000.00"
                    user:
                      email: "john@example.com"
                      firstName: "John"
                      lastName: "Doe"
                      street: "examplestreet 1a"
                      city: "Amsterdam"
                      zipcode: "1234AB"
                      userstatus: "active"
                      dayLimit: "1000.00"
                      transactionLimit: "100.00"
  # POST api/Accounts/{IBAN}/Deposit – add money to the account
  /api/Accounts/{IBAN}/Deposit:
    post:
      tags:
        - Accounts
      parameters:
        - in: path
          name: IBAN
          schema:
            type: string
          required: true
          description: Numeric IBAN of a user.
      summary: Adds money to the account.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                IBAN:
                  type: string
                pincode:
                  type: string # hashed integer pincode
              example:
                amount: 100
                IBAN: NL 0750 8900 0000 0175 7814
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  IBAN:
                    type: string
                  balance:
                    type: number
  # POST api/Accounts/{IBAN}/Withdraw – remove money from the account
  /api/Accounts/{IBAN}/Withdraw:
    post:
      tags:
        - Accounts
      parameters:
        - in: path
          name: IBAN
          schema:
            type: string
          required: true
          description: IBAN of a user.
      summary: Withdraws money from the account.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                IBAN:
                  type: string
                pincode:
                  type: string # hashed integer pincode
              example:
                amount: 100
                IBAN: "NLRABO8900000001757814"
                pincode: "1234"
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  IBAN:
                    type: string
                  balance:
                    type: number
                  pincode:
                    type: string
  # POST api/Transactions – transfer money from account to account
  /api/Transactions:
    post:
      tags:
        - Transactions
      summary: Transfer money from account to account.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fromIBAN:
                  type: string
                toIBAN:
                  type: string
                pincode:
                  type: string # hashed integer pincode
                amount:
                  type: integer
                timestamp:
                  type: string
                userid:
                  type: integer
              example:
                fromIBAN: NL 0750 8900 0000
                toIBAN: NL 0750 8900 0000 0175 7814
                pincode: 1234 # is normally hashed
                amount: 100
                timestamp: timestamp
                userid: 1
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  fromIBAN:
                    type: string
                  balance:
                    type: number
  # GET api/Transactions/History/{IBAN} – get the transaction history from one account
  /api/Transactions/History/{IBAN}:
    get:
      tags:
        - Transactions
      summary: Get the history of transactions for a specific account.
      parameters:
        - in: path
          name: IBAN
          schema:
            type: string
          required: true
          description: IBAN of a user.
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    fromIBAN:
                      type: string
                    toIBAN:
                      type: string
                    pincode:
                      type: string # hashed integer pincode
                    amount:
                      type: integer
                    timestamp:
                      type: string
                    userid:
                      type: integer
                  example:
                    fromIBAN: NL 0750 8900 0000
                    toIBAN: NL 0750 8900 0000 0175 7814
                    pincode: 1234 # is normally hashed
                    amount: 100
                    timestamp: # format needs to be made
                    userid: 1
components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  parameters:
    offsetParam: # <-- Arbitrary name for the definition that will be used to refer to it.
      # Not necessarily the same as the parameter name.
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
      description: The number of items to skip before starting to collect the result set.
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
      description: The numbers of items to return.
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  # 2) Apply the security globally to all operations
security:
  - bearerAuth: []         # use the same name as above

