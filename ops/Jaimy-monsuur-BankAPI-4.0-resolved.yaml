---
openapi: 3.0.0
info:
  title: BankAPI
  description: a bank api
  version: "4.0"
servers:
- url: https://virtserver.swaggerhub.com/Jaimy-monsuur/BankAPI/1.0
  description: SwaggerHub API Auto Mocking
security:
- bearerAuth: []
paths:
  /api/Users:
    get:
      tags:
      - Users
      summary: Returns a list of users.
      description: Optional extended description in CommonMark or HTML.
      parameters:
      - name: offset
        in: query
        description: The number of items to skip before starting to collect the result set.
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
      - name: limit
        in: query
        description: The numbers of items to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 50
          minimum: 1
          type: integer
          default: 20
      responses:
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        "408":
          description: Request timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        "418":
          description: I'm a teapot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        "503":
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        "200":
          description: A JSON array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
    post:
      tags:
      - Users
      summary: Creates a new user.
      description: Optional extended description in CommonMark or HTML.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        "200":
          description: A JSON array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
  /api/Users/{id}:
    get:
      tags:
      - Users
      summary: Get user by id
      description: Optional extended description in CommonMark or HTML.
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: string
          description: The user ID
          format: uuid
          example: d4f8f6b0-c8e0-4e7f-b8e0-f8f8f8f8f8f8
      responses:
        "200":
          description: JSON with 1 user
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/UserDTO'
    put:
      tags:
      - Users
      summary: Updates a user.
      description: Optional extended description in CommonMark or HTML.
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: string
          description: The user ID
          format: uuid
          example: d4f8f6b0-c8e0-4e7f-b8e0-f8f8f8f8f8f8
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        "200":
          description: A JSON array of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
  /api/Accounts:
    get:
      tags:
      - Accounts
      summary: Returns a list of accounts.
      description: Optional extended description in CommonMark or HTML.
      parameters:
      - name: offset
        in: query
        description: The number of items to skip before starting to collect the result set.
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
      - name: limit
        in: query
        description: The numbers of items to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 50
          minimum: 1
          type: integer
          default: 20
      responses:
        "200":
          description: A JSON array of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountDTO'
    post:
      tags:
      - Accounts
      summary: Creates a new bank account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAccountDTO'
      responses:
        "201":
          description: Created
  /api/Accounts/Search:
    get:
      tags:
      - Accounts
      summary: Returns a list of accounts but only gives name and IBAN.
      description: Optional extended description in CommonMark or HTML.
      parameters:
      - name: offset
        in: query
        description: The number of items to skip before starting to collect the result set.
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
      - name: limit
        in: query
        description: The numbers of items to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 50
          minimum: 1
          type: integer
          default: 20
      - name: fullName
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          description: The full name being searched
      responses:
        "200":
          description: A JSON array of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NameSearchAccountDTO'
  /api/Accounts/{IBAN}:
    get:
      tags:
      - Accounts
      summary: Returns a account with IBAN.
      description: Optional extended description in CommonMark or HTML.
      parameters:
      - name: IBAN
        in: path
        description: Gets the account of the IBAN
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A JSON object of user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDTO'
    put:
      tags:
      - Accounts
      summary: Updates an Account.
      description: Optional extended description in CommonMark or HTML.
      parameters:
      - name: IBAN
        in: path
        description: Gets the account of the IBAN
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountDTO'
      responses:
        "200":
          description: A JSON array of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDTO'
  /api/Accounts/{IBAN}/Deposit:
    post:
      tags:
      - Accounts
      summary: Adds money to the account.
      parameters:
      - name: IBAN
        in: path
        description: Gets the account of the IBAN
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionDTO'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDTO'
  /api/Accounts/{IBAN}/Withdraw:
    post:
      tags:
      - Accounts
      summary: Withdraws money from the account.
      parameters:
      - name: IBAN
        in: path
        description: Gets the account of the IBAN
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionDTO'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDTO'
  /api/Transactions:
    post:
      tags:
      - Transactions
      summary: Transfer money from account to account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionDTO'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDTO'
  /api/Transactions/{IBAN}:
    get:
      tags:
      - Transactions
      summary: Get the history of transactions for a specific account.
      parameters:
      - name: IBAN
        in: path
        description: IBAN of a user.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDTO'
  /api/login:
    post:
      tags:
      - Login
      summary: Post the login data to the api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDTO'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
components:
  schemas:
    LoginDTO:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: example@example.com
        password: password
    UserDTO:
      type: object
      properties:
        userid:
          type: string
          format: uuid
        password:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        street:
          type: string
        city:
          type: string
        zipcode:
          type: string
        userstatus:
          type: string
          enum:
          - active
          - disabled
        dayLimit:
          type: number
        transactionLimit:
          type: number
        role:
          type: string
          enum:
          - admin
          - user
      example:
        userid: 5e9f8f8f-8f8f-8f8f-8f8f-8f8f8f8f8f8f
        email: user@gmail.com
        firstName: John
        lastName: Doe
        street: examplestreet 1a
        city: Amsterdam
        zipcode: 1234AB
        userstatus: active
        dayLimit: "1000"
        transactionLimit: "100"
        role: user
    PostAccountDTO:
      type: object
      properties:
        accountType:
          type: string
          enum:
          - savings
          - current
        userid:
          type: string
          format: uuid
        balance:
          type: number
        active:
          type: string
          enum:
          - active
          - disabled
        absoluteLimit:
          type: number
        user:
          $ref: '#/components/schemas/UserDTO'
      example:
        accountType: savings
        userid: 1
        balance: "0"
        active: active
        absoluteLimit: "1000"
    AccountDTO:
      type: object
      properties:
        accountType:
          type: string
          enum:
          - savings
          - current
        userid:
          type: string
          format: uuid
        IBAN:
          type: string
        balance:
          type: number
        active:
          type: string
          enum:
          - active
          - disabled
        absoluteLimit:
          type: number
        user:
          $ref: '#/components/schemas/UserDTO'
      example:
        accountType: savings
        userid: 5e9f8f8f-8f8f-8f8f-8f8f-8f8f8f8f8f8f
        IBAN: NL 0750 8900 0000 0175 7814
        balance: "0"
        active: active
        absoluteLimit: "1000"
    NameSearchAccountDTO:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        IBAN:
          type: string
      example:
        firstName: John
        lastName: Doe
        IBAN: NL 0750 8900 0000 0175 7814
    TransactionDTO:
      type: object
      properties:
        fromIBAN:
          type: string
        pincode:
          type: string
        amount:
          type: integer
        timestamp:
          type: string
        fromUserId:
          type: string
          format: uuid
      example:
        fromIBAN: NL 0750 8900 0000 0175 7814
        toIBAN: NL 0750 8900 0000 0175 7814
        pincode: 81dc9bdb52d04dc20036dbd8313ed055
        amount: 100
        timestamp: 09-01-2021
        fromUserId: cc48d0ec-da1e-49f4-bf57-d0313987e51b
    ErrorDTO:
      type: object
      properties:
        message:
          type: string
        status:
          type: integer
        error:
          type: string
      example:
        message: Invalid credentials
        status: 401
        error: Unauthorized
    inline_response_200:
      type: object
      properties:
        JWTtoken:
          type: string
  responses:
    "304":
      description: Not modified
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
    "400":
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
    "401":
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
    "404":
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
    "408":
      description: Request timeout
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
    "418":
      description: I'm a teapot
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
    "500":
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
    "503":
      description: Service unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
  parameters:
    nameSearch:
      name: fullName
      in: query
      required: true
      style: form
      explode: true
      schema:
        type: string
        description: The full name being searched
    offsetParam:
      name: offset
      in: query
      description: The number of items to skip before starting to collect the result set.
      required: false
      style: form
      explode: true
      schema:
        minimum: 0
        type: integer
    limitParam:
      name: limit
      in: query
      description: The numbers of items to return.
      required: false
      style: form
      explode: true
      schema:
        maximum: 50
        minimum: 1
        type: integer
        default: 20
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
